(* General Overview of 2d Geometric Brownian Motion ------------------------------------------

Geometric Brownian motion SDE
 dS_t = mu*S_t*dt + sigma*S_t*d*W_t
Where:
 W_t is a Wiener Process/Brownian Motion
Here we say that:
 mu is a percentage drift: i.e how much a particle drifts per unit time
 sigma is the percentage volatility: i.e how likely the particle is to make ranom movements per unit time


Analytic solution:
 S_t = S_0 * e^((mu - sigma^2/2) * t + sigma* W_t)
Solved with an ito integral.

Wiener Process/Brownian Motion 
 
   1. W_0 = 0
   2. W has independent increments: for every t > 0, W_(t+u) - W_t, u>=0, are independent of the past values W_s, s <= t
   3. W has gaussian inrements: W_(t+u) - W_t ~ N(0, u)
   4. W has continuos paths: W_t continuous in t
   
Basically, a wiener process is continuous, randomly distributed with a normal distribution and begins at 0.

Analytic solution becomes:
 S_t = S_0 * e^((mu - sigma^2/2) * t + sigma* randomNormal(0, sqrt(t)))
Which translates to: cumulative product inner expression
------------------------------------------------------------------------------------------------------*)

(* plot single geometric brownian motion pattern *)
mu = 1
s0 = 100
(* considering small-ish timestep dt  = 0.1*)
dt = 0.1
sigma = 0.8
sampleSize  = 50
(* generating data according to the above analytic solution *)
sigSqr = ( mu - sigma^2/2)*dt
(* generate x co-ords *)
randNormx =Table[sigma*z, {z,RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize]}]
expx = Exp[sigSqr + randNormx]
preProcessx = Prepend[expx, 1]
patternsx = Table[s0*x,{x,Rest[FoldList[Times, 1, preProcessx]]}]
(* solution visualisation *)
ListLinePlot[patternsx]

(* Plot Multiple Geometric Brownian motions simultaneously *)
mu = 1
s0 = 100
(* considering small-ish timestep dt  = 0.1*)
dt = 0.1
sigma = Table[x, {x,0.8,1.8,0.2}]
(* here we will plot multiple processes simultaneously, with 50 data points each *)
numOfProcesses = Length[sigma]
sampleSize  = 50
(* generating data according to the above analytic solution *)
sigSqr = ( mu - Table[sig^2/2,{sig, 0.8,1.8,0.2}])*dt
randNorm =Table[sigma*z, {z,Transpose[Table[RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize],numOfProcesses]]}]
exp = Table[Exp[x],{x,Table[sigSqr + y, {y, randNorm}]}]
preProcess = Prepend[exp, Table[1, numOfProcesses]]
cumulativeProd = Table[s0*x,{x,Rest[FoldList[Times, 1, preProcess]]}]
patterns = Transpose[cumulativeProd]
(* solution visualisation *)
ListLinePlot[patterns]

(* here is a condensed version of the above expression for geometric brownian motion *)
ListLinePlot[
Transpose[Table[100*x,{x,Rest[FoldList[Times, 1, Prepend[Table[Exp[x],{x,Table[( 1 - Table[sig^2/2,{sig, 0.8,1.8,0.2}])*0.1 + y, {y, Table[Table[x, {x,0.8,1.8,0.2}]*z, {z,Transpose[Table[RandomVariate[NormalDistribution[0, Sqrt[dt]], 50], Length[Table[x, {x,0.8,1.8,0.2}]]]]}]}]}], Table[1,  Length[Table[x, {x,0.8,1.8,0.2}]]]]]]}]]
]

(*Forming an interactive visualisation of geoBM comparisons *)
Manipulate[
ListLinePlot[Transpose[Table[s0*x,{x,Rest[FoldList[Times, 1, Prepend[Table[Exp[x],{x,Table[( mu - Table[sig^2/2,{sig, 0.8,sigM,0.2}])*0.1 + y, {y, Table[Table[x, {x,0.8,sigM,0.2}]*z, {z,Transpose[Table[RandomVariate[NormalDistribution[0, Sqrt[0.1]], 50], Length[Table[x, {x,0.8,sigM,0.2}]]]]}]}]}], Table[1,  Length[Table[x, {x,0.8,sigM,0.2}]]]]]]}]]],
{mu,1,5,1 },
{s0,100,150,10},
{sigM, 1.2, 5, 0.1}
]


(* 3d Geometric Brownian motion -------- 
Approach: 
 - Begin with 3d Wiener Process and build up, plot 1d wiener process??
 - try using 2 random distributions: one for the x movement, one for the y movement, and increment z as per ususal??
*)
mu = 1
s0 = 100
(* considering small-ish timestep dt  = 0.1*)
dt = 0.1
sigma = 0.8
(* here we will plot multiple processes simultaneously, with 50 data points each *)
sampleSize  = 50
(* generating data according to the above analytic solution *)
sigSqr = ( mu - sigma^2/2)*dt
(* generate x,y co-ords *)
randNormx =Table[sigma*z, {z,RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize]}]
randNormy =Table[sigma*z, {z,RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize]}]
expx = Exp[sigSqr + randNormx]
expy = Exp[sigSqr + randNormy]
preProcessx = Prepend[expx, 1]
preProcessy = Prepend[expy, 1]
patternsx = Table[s0*x,{x,Rest[FoldList[Times, 1, preProcessx]]}]
patternsy = Table[s0*x,{x,Rest[FoldList[Times, 1, preProcessy]]}]
(* solution visualisation *)
twoD = Transpose[{patternsx, patternsy} ]
threeD = Table[Append[twoD[[x]],x], {x,Range[50]}]
ListLinePlot3D[threeD]

(*condensing code ... *)
mu = 1
s0 = 50
(* considering small-ish timestep dt  = 0.1*)
dt = 0.01
sigma = 0.1
(* here we will plot multiple processes simultaneously, with 50 data points each *)
sampleSize  = 250
(* solution visualisation *)
ListLinePlot3D[Table[Append[Transpose[{Table[s0*x,{x,Rest[FoldList[Times, 1, Prepend[Exp[( mu - sigma^2/2)*dt + Table[sigma*z, {z,RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize]}]], 1]]]}],  
Table[s0*x,{x,Rest[FoldList[Times, 1, Prepend[Exp[( mu - sigma^2/2)*dt + Table[sigma*z, {z,RandomVariate[NormalDistribution[0, Sqrt[dt]], sampleSize]}]], 1]]]}]} ][[x]],x], {x,Range[sampleSize]}]]
